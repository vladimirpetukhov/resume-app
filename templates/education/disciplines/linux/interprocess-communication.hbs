<div class="col-8 offset-4">
    <div class="col-12" style="color:
        #a6e22e;font-size:1.5em;max-height:200px;overflow-y:auto">
        <p>Program ReverseEncryptorDecryptor:
            Let’s define “Reverse Encryption” (RE) as a method to secure text
            messages -the messages are simply
            reverted, before they are sent further. Write a program
            (‘revendec.c’), which have 2 processes
            communicating through an anonymous pipe:
            ● Process 1should read text lines from the keyboard, then apply REto
            it and send the encrypted
            message to Process 2.
            ● Process 2should await for incoming messages, print the encrypted
            messages to the screen, then
            decrypt them and store into a file (‘messages.log’).
            Project EncryptedChat:
            Write a server/client pair of programs (‘echatsrv.c’ and
            ‘echatclnt.c’). The servershould mimic the
            behaviour of Process 1from the previous task and the client -Process
            2, respectively. The programs
            should use a FIFO(named pipe) as a communication method between
            them.</p>
    </div>
    <h4>achatclnt.c</h4>
    <!-- HTML generated using hilite.me --><div style="background: #272822;
        overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em
        .8em;padding:.2em .6em;"><table><tr><td><pre style="margin: 0;
                        line-height: 125%"> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31</pre></td><td><pre
                        style="margin: 0; line-height: 125%"><span style="color: #75715e">#include&lt;stdio.h&gt;</span>
<span style="color: #75715e">#include&lt;unistd.h&gt;</span>
<span style="color: #75715e">#include&lt;sys/types.h&gt;</span>
<span style="color: #75715e">#include&lt;sys/stat.h&gt;</span>
<span style="color: #75715e">#include&lt;string.h&gt;</span>
<span style="color: #75715e">#include &lt;fcntl.h&gt;</span>
<span style="color: #75715e">#include &lt;errno.h&gt;</span>
<span style="color: #75715e">#include &quot;mutual.h&quot;</span>
<span style="color: #75715e">#define FIFO &quot;./fifo&quot;</span>


<span style="color: #66d9ef">int</span> <span style="color: #a6e22e">clnt</span> <span style="color: #f8f8f2">(</span><span style="color: #66d9ef">int</span> <span style="color: #f8f8f2">argc,</span> <span style="color: #66d9ef">char</span> <span style="color: #f92672">*</span> <span style="color: #f8f8f2">argv[])</span>
<span style="color: #f8f8f2">{</span>

    <span style="color: #66d9ef">int</span> <span style="color: #f8f8f2">msg;</span>
    <span style="color: #66d9ef">FILE</span> <span style="color: #f92672">*</span> <span style="color: #f8f8f2">f;</span>
    <span style="color: #66d9ef">char</span> <span style="color: #f8f8f2">str[</span><span style="color: #ae81ff">50</span><span style="color: #f8f8f2">];</span>
    <span style="color: #66d9ef">int</span> <span style="color: #f8f8f2">pipedes[</span><span style="color: #ae81ff">2</span><span style="color: #f8f8f2">];</span>
    <span style="color: #f8f8f2">pipe(pipedes);</span>

    <span style="color: #66d9ef">char</span> <span style="color: #f8f8f2">buf[</span><span style="color: #ae81ff">1024</span><span style="color: #f8f8f2">];</span>
    <span style="color: #66d9ef">int</span> <span style="color: #f8f8f2">len;</span>
    <span style="color: #66d9ef">while</span> <span style="color: #f8f8f2">((len</span> <span style="color: #f92672">=</span> <span style="color: #f8f8f2">read(pipedes[</span><span style="color: #ae81ff">0</span><span style="color: #f8f8f2">],</span> <span style="color: #f8f8f2">buf,</span> <span style="color: #ae81ff">1024</span><span style="color: #f8f8f2">))</span> <span style="color: #f92672">!=</span> <span style="color: #ae81ff">0</span><span style="color: #f8f8f2">)</span>
        <span style="color: #f8f8f2">write(</span><span style="color: #ae81ff">2</span><span style="color: #f8f8f2">,</span> <span style="color: #f8f8f2">buf,</span> <span style="color: #f8f8f2">len);</span>
    <span style="color: #f8f8f2">reverse(str);</span>
    <span style="color: #f8f8f2">f</span> <span style="color: #f92672">=</span> <span style="color: #f8f8f2">fopen(</span><span style="color: #e6db74">&quot;messages.log&quot;</span><span style="color: #f8f8f2">,</span> <span style="color: #e6db74">&quot;w+&quot;</span><span style="color: #f8f8f2">);</span>
    <span style="color: #f8f8f2">msg</span> <span style="color: #f92672">=</span> <span style="color: #f8f8f2">fwrite(str,</span> <span style="color: #ae81ff">10</span> <span style="color: #f8f8f2">,</span> <span style="color: #f8f8f2">strlen(str),</span> <span style="color: #f8f8f2">f);</span>
    <span style="color: #f8f8f2">fclose(f);</span>
    <span style="color: #f8f8f2">unlink(FIFO);</span>
    <span style="color: #66d9ef">return</span> <span style="color: #ae81ff">0</span><span style="color: #f8f8f2">;</span>
<span style="color: #f8f8f2">}</span>
</pre></td></tr></table></div>
    <h4>echatclnt.c</h4>
    <!-- HTML generated using hilite.me --><div style="background: #272822;
        overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em
        .8em;padding:.2em .6em;"><table><tr><td><pre style="margin: 0;
                        line-height: 125%"> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31</pre></td><td><pre
                        style="margin: 0; line-height: 125%"><span style="color: #75715e">#include&lt;stdio.h&gt;</span>
<span style="color: #75715e">#include&lt;unistd.h&gt;</span>
<span style="color: #75715e">#include&lt;sys/types.h&gt;</span>
<span style="color: #75715e">#include&lt;sys/stat.h&gt;</span>
<span style="color: #75715e">#include&lt;string.h&gt;</span>
<span style="color: #75715e">#include &lt;fcntl.h&gt;</span>
<span style="color: #75715e">#include &lt;errno.h&gt;</span>
<span style="color: #75715e">#include &quot;mutual.h&quot;</span>
<span style="color: #75715e">#define FIFO &quot;./fifo&quot;</span>


<span style="color: #66d9ef">int</span> <span style="color: #a6e22e">clnt</span> <span style="color: #f8f8f2">(</span><span style="color: #66d9ef">int</span> <span style="color: #f8f8f2">argc,</span> <span style="color: #66d9ef">char</span> <span style="color: #f92672">*</span> <span style="color: #f8f8f2">argv[])</span>
<span style="color: #f8f8f2">{</span>

    <span style="color: #66d9ef">int</span> <span style="color: #f8f8f2">msg;</span>
    <span style="color: #66d9ef">FILE</span> <span style="color: #f92672">*</span> <span style="color: #f8f8f2">f;</span>
    <span style="color: #66d9ef">char</span> <span style="color: #f8f8f2">str[</span><span style="color: #ae81ff">50</span><span style="color: #f8f8f2">];</span>
    <span style="color: #66d9ef">int</span> <span style="color: #f8f8f2">pipedes[</span><span style="color: #ae81ff">2</span><span style="color: #f8f8f2">];</span>
    <span style="color: #f8f8f2">pipe(pipedes);</span>

    <span style="color: #66d9ef">char</span> <span style="color: #f8f8f2">buf[</span><span style="color: #ae81ff">1024</span><span style="color: #f8f8f2">];</span>
    <span style="color: #66d9ef">int</span> <span style="color: #f8f8f2">len;</span>
    <span style="color: #66d9ef">while</span> <span style="color: #f8f8f2">((len</span> <span style="color: #f92672">=</span> <span style="color: #f8f8f2">read(pipedes[</span><span style="color: #ae81ff">0</span><span style="color: #f8f8f2">],</span> <span style="color: #f8f8f2">buf,</span> <span style="color: #ae81ff">1024</span><span style="color: #f8f8f2">))</span> <span style="color: #f92672">!=</span> <span style="color: #ae81ff">0</span><span style="color: #f8f8f2">)</span>
        <span style="color: #f8f8f2">write(</span><span style="color: #ae81ff">2</span><span style="color: #f8f8f2">,</span> <span style="color: #f8f8f2">buf,</span> <span style="color: #f8f8f2">len);</span>
    <span style="color: #f8f8f2">reverse(str);</span>
    <span style="color: #f8f8f2">f</span> <span style="color: #f92672">=</span> <span style="color: #f8f8f2">fopen(</span><span style="color: #e6db74">&quot;messages.log&quot;</span><span style="color: #f8f8f2">,</span> <span style="color: #e6db74">&quot;w+&quot;</span><span style="color: #f8f8f2">);</span>
    <span style="color: #f8f8f2">msg</span> <span style="color: #f92672">=</span> <span style="color: #f8f8f2">fwrite(str,</span> <span style="color: #ae81ff">10</span> <span style="color: #f8f8f2">,</span> <span style="color: #f8f8f2">strlen(str),</span> <span style="color: #f8f8f2">f);</span>
    <span style="color: #f8f8f2">fclose(f);</span>
    <span style="color: #f8f8f2">unlink(FIFO);</span>
    <span style="color: #66d9ef">return</span> <span style="color: #ae81ff">0</span><span style="color: #f8f8f2">;</span>
<span style="color: #f8f8f2">}</span>
</pre></td></tr></table></div>
    <h4>echatsrv.c</h4>
    <!-- HTML generated using hilite.me --><div style="background: #272822;
        overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em
        .8em;padding:.2em .6em;"><table><tr><td><pre style="margin: 0;
                        line-height: 125%"> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27</pre></td><td><pre
                        style="margin: 0; line-height: 125%"><span style="color: #75715e">#include&lt;stdio.h&gt;</span>
<span style="color: #75715e">#include&lt;unistd.h&gt;</span>
<span style="color: #75715e">#include&lt;sys/types.h&gt;</span>
<span style="color: #75715e">#include&lt;sys/stat.h&gt;</span>
<span style="color: #75715e">#include&lt;string.h&gt;</span>
<span style="color: #75715e">#include &lt;fcntl.h&gt;</span>
<span style="color: #75715e">#include &lt;errno.h&gt;</span>
<span style="color: #75715e">#include &quot;mutual.h&quot;</span>
<span style="color: #75715e">#define FIFO &quot;./fifo&quot;</span>

<span style="color: #66d9ef">int</span> <span style="color: #a6e22e">main</span><span style="color: #f8f8f2">(</span><span style="color: #66d9ef">int</span> <span style="color: #f8f8f2">argc,</span> <span style="color: #66d9ef">char</span> <span style="color: #f92672">*</span> <span style="color: #f8f8f2">argv[])</span> <span style="color: #f8f8f2">{</span>

    <span style="color: #66d9ef">FILE</span> <span style="color: #f92672">*</span> <span style="color: #f8f8f2">f;</span>
    <span style="color: #66d9ef">char</span> <span style="color: #f8f8f2">str[</span><span style="color: #ae81ff">50</span><span style="color: #f8f8f2">];</span>

    <span style="color: #f8f8f2">mkfifo(FIFO,</span> <span style="color: #ae81ff">0600</span><span style="color: #f8f8f2">);</span>
    <span style="color: #f8f8f2">f</span> <span style="color: #f92672">=</span> <span style="color: #f8f8f2">fopen(FIFO,</span> <span style="color: #e6db74">&quot;wr&quot;</span><span style="color: #f8f8f2">);</span>
    <span style="color: #66d9ef">if</span> <span style="color: #f8f8f2">(f</span> <span style="color: #f92672">==</span> <span style="color: #f8f8f2">NULL){</span>
        <span style="color: #66d9ef">return</span> <span style="color: #f92672">-</span><span style="color: #ae81ff">1</span><span style="color: #f8f8f2">;</span>
    <span style="color: #f8f8f2">}</span>
    <span style="color: #f8f8f2">printf(</span><span style="color: #e6db74">&quot;</span><span style="color: #ae81ff">\n</span><span style="color: #e6db74">Enter the string: &quot;</span><span style="color: #f8f8f2">);</span>
    <span style="color: #f8f8f2">scanf</span> <span style="color: #f8f8f2">(</span><span style="color: #e6db74">&quot;%[^</span><span style="color: #ae81ff">\n</span><span style="color: #e6db74">]%*c&quot;</span><span style="color: #f8f8f2">,</span> <span style="color: #f8f8f2">str);</span>
    <span style="color: #f8f8f2">reverse(str);</span>
    <span style="color: #f8f8f2">fclose(f);</span>
    <span style="color: #f8f8f2">unlink(FIFO);</span>
    <span style="color: #66d9ef">return</span> <span style="color: #ae81ff">0</span><span style="color: #f8f8f2">;</span>
<span style="color: #f8f8f2">}</span>
</pre></td></tr></table></div>
    <h4>
        revendec.c
    </h4>
    <!-- HTML generated using hilite.me --><div style="background: #272822;
        overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em
        .8em;padding:.2em .6em;"><table><tr><td><pre style="margin: 0;
                        line-height: 125%"> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68</pre></td><td><pre
                        style="margin: 0; line-height: 125%"><span style="color: #75715e">#include&lt;stdio.h&gt;</span>
<span style="color: #75715e">#include&lt;unistd.h&gt;</span>
<span style="color: #75715e">#include&lt;sys/types.h&gt;</span>
<span style="color: #75715e">#include&lt;sys/stat.h&gt;</span>
<span style="color: #75715e">#include&lt;string.h&gt;</span>
<span style="color: #75715e">#include &lt;fcntl.h&gt;</span>
<span style="color: #75715e">#include &lt;errno.h&gt;</span>

<span style="color: #66d9ef">short</span> <span style="color: #a6e22e">getStrLen</span><span style="color: #f8f8f2">(</span><span style="color: #66d9ef">char</span><span style="color: #f92672">*</span> <span style="color: #f8f8f2">s)</span>
<span style="color: #f8f8f2">{</span>
    <span style="color: #66d9ef">short</span> <span style="color: #f8f8f2">len</span><span style="color: #f92672">=</span><span style="color: #ae81ff">0</span><span style="color: #f8f8f2">;</span>
    <span style="color: #66d9ef">while</span><span style="color: #f8f8f2">(s[len]</span><span style="color: #f92672">!=</span><span style="color: #e6db74">&#39;\0&#39;</span><span style="color: #f8f8f2">)</span>
        <span style="color: #f8f8f2">len</span><span style="color: #f92672">++</span><span style="color: #f8f8f2">;</span>
    <span style="color: #66d9ef">return</span> <span style="color: #f8f8f2">len;</span>
<span style="color: #f8f8f2">}</span>

<span style="color: #66d9ef">void</span> <span style="color: #a6e22e">reverse</span><span style="color: #f8f8f2">(</span><span style="color: #66d9ef">char</span> <span style="color: #f92672">*</span><span style="color: #f8f8f2">str)</span>
<span style="color: #f8f8f2">{</span>
    <span style="color: #66d9ef">short</span> <span style="color: #f8f8f2">len</span><span style="color: #f92672">=</span><span style="color: #ae81ff">0</span><span style="color: #f8f8f2">,i,j;</span>
    <span style="color: #66d9ef">char</span> <span style="color: #f8f8f2">temp;</span>
    <span style="color: #f8f8f2">len</span><span style="color: #f92672">=</span><span style="color: #f8f8f2">getStrLen(str);</span>

    <span style="color: #66d9ef">for</span><span style="color: #f8f8f2">(i</span><span style="color: #f92672">=</span><span style="color: #f8f8f2">len</span><span style="color: #f92672">-</span><span style="color: #ae81ff">1</span><span style="color: #f8f8f2">,j</span><span style="color: #f92672">=</span><span style="color: #ae81ff">0</span><span style="color: #f8f8f2">;</span> <span style="color: #f8f8f2">j</span><span style="color: #f92672">&lt;</span><span style="color: #f8f8f2">(len</span><span style="color: #f92672">/</span><span style="color: #ae81ff">2</span><span style="color: #f8f8f2">);</span> <span style="color: #f8f8f2">i</span><span style="color: #f92672">--</span><span style="color: #f8f8f2">,j</span><span style="color: #f92672">++</span><span style="color: #f8f8f2">)</span>
    <span style="color: #f8f8f2">{</span>
        <span style="color: #f8f8f2">temp</span><span style="color: #f92672">=</span><span style="color: #f8f8f2">str[j];</span>
        <span style="color: #f8f8f2">str[j]</span><span style="color: #f92672">=</span><span style="color: #f8f8f2">str[i];</span>
        <span style="color: #f8f8f2">str[i]</span><span style="color: #f92672">=</span><span style="color: #f8f8f2">temp;</span>
    <span style="color: #f8f8f2">}</span>
<span style="color: #f8f8f2">}</span>

<span style="color: #66d9ef">int</span> <span style="color: #a6e22e">main</span><span style="color: #f8f8f2">(</span><span style="color: #66d9ef">int</span> <span style="color: #f8f8f2">argc,</span> <span style="color: #66d9ef">char</span> <span style="color: #f92672">*</span> <span style="color: #f8f8f2">argv[])</span>
<span style="color: #f8f8f2">{</span>

    <span style="color: #66d9ef">char</span> <span style="color: #f8f8f2">str[</span><span style="color: #ae81ff">50</span><span style="color: #f8f8f2">];</span>
    <span style="color: #66d9ef">FILE</span> <span style="color: #f92672">*</span> <span style="color: #f8f8f2">fd;</span>
<span style="color: #66d9ef">int</span> <span style="color: #f8f8f2">msg;</span>

    <span style="color: #66d9ef">int</span> <span style="color: #f8f8f2">pipedes[</span><span style="color: #ae81ff">2</span><span style="color: #f8f8f2">];</span>
    <span style="color: #f8f8f2">pipe(pipedes);</span>
    <span style="color: #66d9ef">pid_t</span> <span style="color: #f8f8f2">pid</span> <span style="color: #f92672">=</span> <span style="color: #f8f8f2">fork();</span>
    <span style="color: #66d9ef">if</span> <span style="color: #f8f8f2">(</span> <span style="color: #f8f8f2">pid</span> <span style="color: #f92672">&gt;</span> <span style="color: #ae81ff">0</span> <span style="color: #f8f8f2">)</span>
    <span style="color: #f8f8f2">{</span>
        <span style="color: #f8f8f2">printf(</span><span style="color: #e6db74">&quot;</span><span style="color: #ae81ff">\n</span><span style="color: #e6db74">Enter the string: &quot;</span><span style="color: #f8f8f2">);</span>
        <span style="color: #f8f8f2">scanf</span> <span style="color: #f8f8f2">(</span><span style="color: #e6db74">&quot;%[^</span><span style="color: #ae81ff">\n</span><span style="color: #e6db74">]%*c&quot;</span><span style="color: #f8f8f2">,</span> <span style="color: #f8f8f2">str);</span>
        <span style="color: #f8f8f2">reverse(str);</span>

        <span style="color: #f8f8f2">close(pipedes[</span><span style="color: #ae81ff">0</span><span style="color: #f8f8f2">]);</span>
        <span style="color: #f8f8f2">write(pipedes[</span><span style="color: #ae81ff">1</span><span style="color: #f8f8f2">],</span> <span style="color: #f8f8f2">(</span><span style="color: #66d9ef">void</span> <span style="color: #f92672">*</span><span style="color: #f8f8f2">)</span> <span style="color: #f8f8f2">str,</span> <span style="color: #f8f8f2">strlen(str)</span> <span style="color: #f92672">+</span> <span style="color: #ae81ff">1</span><span style="color: #f8f8f2">);</span>
        <span style="color: #f8f8f2">close(pipedes[</span><span style="color: #ae81ff">1</span><span style="color: #f8f8f2">]);</span>

    <span style="color: #f8f8f2">}</span>
    <span style="color: #66d9ef">else</span>
    <span style="color: #f8f8f2">{</span>
        <span style="color: #66d9ef">char</span> <span style="color: #f8f8f2">buf[</span><span style="color: #ae81ff">1024</span><span style="color: #f8f8f2">];</span>
        <span style="color: #66d9ef">int</span> <span style="color: #f8f8f2">len;</span>
        <span style="color: #f8f8f2">close(pipedes[</span><span style="color: #ae81ff">1</span><span style="color: #f8f8f2">]);</span>
        <span style="color: #66d9ef">while</span> <span style="color: #f8f8f2">((len</span> <span style="color: #f92672">=</span> <span style="color: #f8f8f2">read(pipedes[</span><span style="color: #ae81ff">0</span><span style="color: #f8f8f2">],</span> <span style="color: #f8f8f2">buf,</span> <span style="color: #ae81ff">1024</span><span style="color: #f8f8f2">))</span> <span style="color: #f92672">!=</span> <span style="color: #ae81ff">0</span><span style="color: #f8f8f2">)</span>
            <span style="color: #f8f8f2">write(</span><span style="color: #ae81ff">2</span><span style="color: #f8f8f2">,</span> <span style="color: #f8f8f2">buf,</span> <span style="color: #f8f8f2">len);</span>
        <span style="color: #f8f8f2">reverse(str);</span>

     <span style="color: #f8f8f2">}</span>
	<span style="color: #f8f8f2">fd</span> <span style="color: #f92672">=</span> <span style="color: #f8f8f2">fopen(</span><span style="color: #e6db74">&quot;messages.log&quot;</span><span style="color: #f8f8f2">,</span> <span style="color: #e6db74">&quot;wb&quot;</span><span style="color: #f8f8f2">);</span>
        <span style="color: #f8f8f2">msg</span> <span style="color: #f92672">=</span> <span style="color: #f8f8f2">fwrite(str,</span> <span style="color: #ae81ff">10</span> <span style="color: #f8f8f2">,</span> <span style="color: #f8f8f2">strlen(str),</span> <span style="color: #f8f8f2">fd);</span>
        <span style="color: #f8f8f2">fclose(fd);</span>
        <span style="color: #f8f8f2">close(pipedes[</span><span style="color: #ae81ff">0</span><span style="color: #f8f8f2">]);</span>

    <span style="color: #66d9ef">return</span> <span style="color: #ae81ff">0</span><span style="color: #f8f8f2">;</span>
<span style="color: #f8f8f2">}</span>
</pre></td></tr></table></div>
</div>