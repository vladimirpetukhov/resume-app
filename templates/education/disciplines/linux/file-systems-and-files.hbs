<div class="col-8 offset-4">
    <div class="col-12" style="color: #a6e22e;font-size:1.5em">
        <p>Write a program (‘fmanipulator.c’), which takes 3 arguments:
            words_count, min_length, max_length. The
            program should generate a file called ‘words.txt’, which contains
            words_countwords (separated with
            spaces). To generate the words use the following function from the
            code files in ‘/day03/rndword/’ (note
            that the function will not generate real words, but rather random
            sequences of characters)</p>
    </div>
    <!-- HTML generated using hilite.me --><div style="background: #272822;
        overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em
        .8em;padding:.2em .6em;"><table><tr><td><pre style="margin: 0;
                        line-height: 125%"> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66</pre></td><td><pre
                        style="margin: 0; line-height: 125%"><span style="color: #75715e">#include &lt;time.h&gt;</span>
<span style="color: #75715e">#include &lt;stdio.h&gt;</span>
<span style="color: #75715e">#include &lt;stdlib.h&gt;</span>
<span style="color: #75715e">#include &lt;string.h&gt;</span>
<span style="color: #75715e">#include &lt;unistd.h&gt;</span>
<span style="color: #75715e">#include &lt;fcntl.h&gt;</span>
<span style="color: #75715e">#include &lt;sys/file.h&gt;</span>

<span style="color: #66d9ef">const</span> <span style="color: #66d9ef">char</span> <span style="color: #f8f8f2">alphabet</span> <span style="color: #f8f8f2">[]</span> <span style="color: #f92672">=</span> <span style="color: #e6db74">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span><span style="color: #f8f8f2">;</span>
<span style="color: #66d9ef">int</span> <span style="color: #a6e22e">intN</span><span style="color: #f8f8f2">(</span><span style="color: #66d9ef">int</span> <span style="color: #f8f8f2">n)</span> <span style="color: #f8f8f2">{</span><span style="color: #66d9ef">return</span> <span style="color: #f8f8f2">rand()</span> <span style="color: #f92672">%</span> <span style="color: #f8f8f2">n;}</span>

<span style="color: #66d9ef">char</span> <span style="color: #f92672">*</span><span style="color: #a6e22e">randomString</span><span style="color: #f8f8f2">(</span><span style="color: #66d9ef">int</span> <span style="color: #f8f8f2">min_length,</span> <span style="color: #66d9ef">int</span> <span style="color: #f8f8f2">max_length){</span>
    <span style="color: #66d9ef">int</span> <span style="color: #f8f8f2">len</span> <span style="color: #f92672">=</span> <span style="color: #f8f8f2">(rand()</span><span style="color: #f92672">%</span><span style="color: #f8f8f2">(max_length</span><span style="color: #f92672">-</span><span style="color: #f8f8f2">min_length</span><span style="color: #f92672">+</span><span style="color: #ae81ff">1</span><span style="color: #f8f8f2">))</span><span style="color: #f92672">+</span><span style="color: #f8f8f2">min_length;</span>
    <span style="color: #66d9ef">char</span> <span style="color: #f92672">*</span><span style="color: #f8f8f2">rstr</span> <span style="color: #f92672">=</span> <span style="color: #f8f8f2">malloc((len</span><span style="color: #f92672">+</span><span style="color: #ae81ff">2</span><span style="color: #f8f8f2">)</span><span style="color: #f92672">*</span><span style="color: #66d9ef">sizeof</span><span style="color: #f8f8f2">(</span><span style="color: #66d9ef">char</span><span style="color: #f8f8f2">));</span>
    <span style="color: #66d9ef">int</span> <span style="color: #f8f8f2">i;</span>
    <span style="color: #66d9ef">for</span><span style="color: #f8f8f2">(i</span> <span style="color: #f92672">=</span> <span style="color: #ae81ff">0</span><span style="color: #f8f8f2">;</span> <span style="color: #f8f8f2">i</span> <span style="color: #f92672">&lt;</span> <span style="color: #f8f8f2">len;</span> <span style="color: #f8f8f2">i</span><span style="color: #f92672">++</span><span style="color: #f8f8f2">){</span>
        <span style="color: #f8f8f2">rstr[i]</span> <span style="color: #f92672">=</span> <span style="color: #f8f8f2">alphabet[intN(strlen(alphabet))];</span>
    <span style="color: #f8f8f2">}</span>
    <span style="color: #f8f8f2">rstr[len]</span> <span style="color: #f92672">=</span> <span style="color: #e6db74">&#39; &#39;</span><span style="color: #f8f8f2">;</span>
    <span style="color: #f8f8f2">rstr[len</span><span style="color: #f92672">+</span><span style="color: #ae81ff">1</span><span style="color: #f8f8f2">]</span> <span style="color: #f92672">=</span><span style="color: #e6db74">&#39;\0&#39;</span><span style="color: #f8f8f2">;</span>
    <span style="color: #66d9ef">return</span> <span style="color: #f8f8f2">rstr;</span>
<span style="color: #f8f8f2">}</span>

<span style="color: #66d9ef">int</span> <span style="color: #a6e22e">main</span><span style="color: #f8f8f2">(</span><span style="color: #66d9ef">int</span> <span style="color: #f8f8f2">argc,</span> <span style="color: #66d9ef">char</span> <span style="color: #f92672">**</span><span style="color: #f8f8f2">argv){</span>
    <span style="color: #f8f8f2">srand(time(NULL));</span>
    <span style="color: #66d9ef">int</span> <span style="color: #f8f8f2">max_length,</span> <span style="color: #f8f8f2">min_length,</span> <span style="color: #f8f8f2">word_count;</span>
    <span style="color: #f8f8f2">printf(</span><span style="color: #e6db74">&quot;Word count: </span><span style="color: #ae81ff">\n</span><span style="color: #e6db74">&quot;</span><span style="color: #f8f8f2">);</span>
    <span style="color: #f8f8f2">scanf(</span><span style="color: #e6db74">&quot;%i&quot;</span><span style="color: #f8f8f2">,</span><span style="color: #f92672">&amp;</span><span style="color: #f8f8f2">word_count);</span>
    <span style="color: #f8f8f2">printf(</span><span style="color: #e6db74">&quot;Max length: </span><span style="color: #ae81ff">\n</span><span style="color: #e6db74">&quot;</span><span style="color: #f8f8f2">);</span>
    <span style="color: #f8f8f2">scanf(</span><span style="color: #e6db74">&quot;%i&quot;</span><span style="color: #f8f8f2">,</span><span style="color: #f92672">&amp;</span><span style="color: #f8f8f2">max_length);</span>
    <span style="color: #f8f8f2">printf(</span><span style="color: #e6db74">&quot;Min length: </span><span style="color: #ae81ff">\n</span><span style="color: #e6db74">&quot;</span><span style="color: #f8f8f2">);</span>
    <span style="color: #f8f8f2">scanf(</span><span style="color: #e6db74">&quot;%i&quot;</span><span style="color: #f8f8f2">,</span><span style="color: #f92672">&amp;</span><span style="color: #f8f8f2">min_length);</span>

    <span style="color: #66d9ef">char</span> <span style="color: #f92672">*</span><span style="color: #f8f8f2">p;</span>
    <span style="color: #66d9ef">FILE</span> <span style="color: #f92672">*</span><span style="color: #f8f8f2">fd;</span>
    <span style="color: #f8f8f2">fd</span> <span style="color: #f92672">=</span> <span style="color: #f8f8f2">fopen(</span><span style="color: #e6db74">&quot;words.txt&quot;</span><span style="color: #f8f8f2">,</span><span style="color: #e6db74">&quot;w+&quot;</span><span style="color: #f8f8f2">);</span>
    <span style="color: #66d9ef">int</span> <span style="color: #f8f8f2">fdx</span> <span style="color: #f92672">=</span> <span style="color: #f8f8f2">fileno(fd);</span>
    <span style="color: #66d9ef">struct</span> <span style="color: #f8f8f2">flock</span> <span style="color: #f8f8f2">fi;</span>
    <span style="color: #f8f8f2">fi.l_type</span> <span style="color: #f92672">=</span> <span style="color: #f8f8f2">F_WRLCK;</span>
    <span style="color: #f8f8f2">fi.l_whence</span> <span style="color: #f92672">=</span> <span style="color: #f8f8f2">SEEK_SET;</span>
    <span style="color: #f8f8f2">fi.l_start</span> <span style="color: #f92672">=</span> <span style="color: #ae81ff">0</span><span style="color: #f8f8f2">;</span>
    <span style="color: #f8f8f2">fi.l_len</span> <span style="color: #f92672">=</span> <span style="color: #ae81ff">100</span><span style="color: #f8f8f2">;</span>
    <span style="color: #f8f8f2">fcntl(fdx,</span> <span style="color: #f8f8f2">F_SETLK,</span> <span style="color: #f92672">&amp;</span><span style="color: #f8f8f2">fi);</span>
    <span style="color: #66d9ef">if</span><span style="color: #f8f8f2">(fcntl(fdx,F_SETLK,</span><span style="color: #f92672">&amp;</span><span style="color: #f8f8f2">fi)</span> <span style="color: #f92672">==</span> <span style="color: #f92672">-</span><span style="color: #ae81ff">1</span><span style="color: #f8f8f2">)</span>
    <span style="color: #f8f8f2">{printf(</span><span style="color: #e6db74">&quot;words.txt is locked by another process&quot;</span><span style="color: #f8f8f2">);}</span>
    <span style="color: #f8f8f2">printf(</span><span style="color: #e6db74">&quot;First 100 bites of words.txt are locked by %i.</span><span style="color: #ae81ff">\n</span><span style="color: #e6db74">&quot;</span><span style="color: #f8f8f2">,fi.l_pid);</span>
    <span style="color: #f8f8f2">printf(</span><span style="color: #e6db74">&quot;Press ENTER to unlock and write</span><span style="color: #ae81ff">\n</span><span style="color: #e6db74">&quot;</span><span style="color: #f8f8f2">);</span>
    <span style="color: #f8f8f2">getchar();</span>
    <span style="color: #f8f8f2">getchar();</span>
    <span style="color: #f8f8f2">fi.l_type</span> <span style="color: #f92672">=</span> <span style="color: #f8f8f2">F_UNLCK;</span>

    <span style="color: #66d9ef">for</span><span style="color: #f8f8f2">(</span><span style="color: #66d9ef">int</span> <span style="color: #f8f8f2">i</span> <span style="color: #f92672">=</span> <span style="color: #ae81ff">0</span><span style="color: #f8f8f2">;</span> <span style="color: #f8f8f2">i</span> <span style="color: #f92672">&lt;</span> <span style="color: #f8f8f2">word_count;</span> <span style="color: #f8f8f2">i</span><span style="color: #f92672">++</span><span style="color: #f8f8f2">){</span>
        <span style="color: #f8f8f2">p</span> <span style="color: #f92672">=</span> <span style="color: #f8f8f2">randomString(min_length,</span> <span style="color: #f8f8f2">max_length);</span>
        <span style="color: #f8f8f2">fprintf(fd,</span><span style="color: #e6db74">&quot;%s&quot;</span><span style="color: #f8f8f2">,p);</span>
    <span style="color: #f8f8f2">}</span>

    <span style="color: #f8f8f2">rewind(fd);</span>
    <span style="color: #66d9ef">char</span> <span style="color: #f8f8f2">ch;</span>
    <span style="color: #66d9ef">while</span><span style="color: #f8f8f2">((ch</span> <span style="color: #f92672">=</span>  <span style="color: #f8f8f2">fgetc(fd))</span> <span style="color: #f92672">!=</span> <span style="color: #f8f8f2">EOF){</span>
        <span style="color: #f8f8f2">printf(</span><span style="color: #e6db74">&quot;%c&quot;</span><span style="color: #f8f8f2">,ch);</span>
        <span style="color: #f8f8f2">fflush(stdout);</span>
    <span style="color: #f8f8f2">}</span>
    <span style="color: #f8f8f2">fclose(fd);</span>
    <span style="color: #f8f8f2">printf(</span><span style="color: #e6db74">&quot;</span><span style="color: #ae81ff">\n</span><span style="color: #e6db74">&quot;</span><span style="color: #f8f8f2">);</span>
    <span style="color: #f8f8f2">printf(</span><span style="color: #e6db74">&quot;Words are printed and saved.</span><span style="color: #ae81ff">\n</span><span style="color: #e6db74">&quot;</span><span style="color: #f8f8f2">);</span>
<span style="color: #f8f8f2">}</span>
</pre></td></tr></table></div>
</div>