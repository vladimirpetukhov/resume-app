// Generated by CoffeeScript 1.7.1
(function() {
  var factory;

  factory = function($, window, document) {
    var PLUGIN_NAME, Plugin, defaults;
    if ($ == null) {
      $ = jQuery;
    }
    PLUGIN_NAME = 'tree';
    defaults = {
      content: '.content',
      prepend: true,
      listContainer: null,
      filter: ':header'
    };
    Plugin = (function() {
      function Plugin(el, options) {
        var plugin;
        this.el = el;
        plugin = this;
        this.settings = $.extend({}, defaults, options);
        this.$content = $(this.el);
        if (this.settings.listContainer != null) {
          this.$listContainer = $(this.settings.listContainer);
        }
        this.$headers = this.$content.find('*').filter(this.settings.filter);
        this.$list = this.listify(this.$headers);
        if (this.$listContainer != null) {
          this.$listContainer.append(this.$list);
        } else if (this.settings.prepend) {
          this.$content.prepend(this.$list);
        }
        $('li:first').addClass('active');
        this.isOnScreen;
        $(window).scroll((function(_this) {
          return function() {
            return $.each(_this.$headers, function(i, header) {
              var $current, $li, difference;
              $current = $(header);
              difference = $current.offset().top - $(window).scrollTop();
              if (difference < 100) {
                $('.active').removeClass('active');
                $current.addClass('active');
                $li = $('li');
                $($li.get(i)).addClass('active');
                return $($li.get(i)).parents('li').addClass('active');
              }
            });
          };
        })(this));
      }

      Plugin.prototype.listify = function($nodes) {
        var $between, $list, listifyBetween, plugin, topHeaderLevel;
        plugin = this;
        topHeaderLevel = this.topHeaderLevel($nodes);
        if (topHeaderLevel == null) {
          return null;
        }
        $list = $("<ul/>");
        $between = $();
        listifyBetween = function() {
          if ($between.length > 0) {
            $list.find("li").last().append(plugin.listify($between));
            return $between = $();
          }
        };
        $nodes.each(function() {
          var $item, $link, $node, id;
          $node = $(this);
          if (!$node.is("h" + topHeaderLevel)) {
            return $between = $between.add($node);
          } else {
            listifyBetween();
            $link = $('<a/>').html($node.html());
            id = $node.attr('id');
            if (id == null) {
              id = plugin.slugify($node.text());
              id = plugin.uniqueId(id);
              $node.attr('id', id);
            }
            $link.attr('href', "#" + id);
            $item = $('<li/>').append($link);
            $item.data("plugin_" + PLUGIN_NAME + "_header", $node);
            $node.data("plugin_" + PLUGIN_NAME + "_item", $item);
            return $list.append($item);
          }
        });
        listifyBetween();
        return $list;
      };

      Plugin.prototype.isOnScreen = function() {
        var win;
        win = $(window);
        return console.log(win.scrollTop());
      };

      Plugin.prototype.headerDepth = function(el) {
        return parseInt(el.nodeName.slice(-1));
      };

      Plugin.prototype.topHeaderLevel = function($nodes) {
        var num, _i;
        for (num = _i = 1; _i <= 6; num = ++_i) {
          if ($nodes.is("h" + num)) {
            return num;
          }
        }
        return null;
      };

      Plugin.prototype.uniqueId = function(id) {
        if (id == null) {
          id = 'id';
        }
        if ($("#" + id).length > 0) {
          id += 0;
          return this.uniqueId(id);
        } else {
          return id;
        }
      };

      Plugin.prototype.slugify = function(text) {
        return text.toString().toLowerCase().replace(/\s+/g, '-').replace(/[^\w\-]+/g, '').replace(/\-\-+/g, '-').replace(/^-+/, '').replace(/-+$/, '');
      };

      return Plugin;

    })();
    return $.fn[PLUGIN_NAME] = function(options) {
      return $(this.map(function() {
        var plugin;
        if (!$.data(this, "plugin_" + PLUGIN_NAME)) {
          plugin = new Plugin(this, options);
          $.data(this, "plugin_" + PLUGIN_NAME, plugin);
          return plugin.$list;
        }
      }).get(0));
    };
  };

  (function(factory, window, document) {
    if (typeof define === 'function' && define.amd) {
      return define(['jquery'], factory);
    } else if (typeof exports === 'object') {
      return factory(require('jquery'), window, document);
    } else {
      return factory(jQuery, window, document);
    }
  })(factory, window, document);

}).call(this);

//# sourceMappingURL=jquery.tree.map
